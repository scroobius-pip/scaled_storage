type NodeError = variant {
    Migration: text;
    ScaleUp: text;
    Initialize: text;
    Broadcast: text;
};

type node_info_status = variant {
    Initialized;
    Ready;
    Error:NodeError;
    ShutDown;
    Migrating;
    ScaleUp;
    ScaleDown;
};


type node_info = record {
    all_nodes: vec text;
    prev_node_id: opt principal;
    next_node_id: opt principal;
    status: node_info_status;
    cycles_balance: nat64;
};

type install_args = record {
    all_nodes: vec text;
};

type init_canister_manager_param = record {
    args: opt install_args;
};

type migrate_args = record {
    data: blob;
};

type wasm_init_args = record {
    position: nat8;
    wasm_chunk: blob;
};

type canister_manager_event = variant {
 NodeCreated: text; 
 NodeDeleted: text;
 Migrate: migrate_args;
};

type node_result = record {
    data: text;
    from: principal;
}

service : {
    "greet": (text) -> (text) query;
     "node_info": () -> (node_info) query;
     "init_canister_manager":(init_canister_manager_param)-> ();
     "handle_event":(canister_manager_event)->();
     "init_wasm":(wasm_init_args)->(bool);
     "get_data":(text)->(node_result) query;
     "update_data":(text,text)->(node_result);
}

